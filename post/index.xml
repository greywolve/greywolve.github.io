<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Oliver Powell</title>
    <link>http://www.opowell.com/post/index.xml</link>
    <description>Recent content in Post-rsses on Oliver Powell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Dec 2016 15:49:57 +0200</lastBuildDate>
    <atom:link href="http://www.opowell.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Trust yourself</title>
      <link>http://www.opowell.com/post/trust-yourself/</link>
      <pubDate>Sun, 11 Dec 2016 15:49:57 +0200</pubDate>
      
      <guid>http://www.opowell.com/post/trust-yourself/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Trust thyself: every heart vibrates to that iron string. Nothing is at last
sacred but the integrity of your own mind. A man should learn to detect and
watch that gleam of light which flashes across his mind from within, more than
the lustre of the firmament of bards and sages&amp;hellip; In every work of genius we
recognize our own rejected thoughts: they come back to us with a certain
alienated majesty. The power which resides in him is new in nature, and none but
he knows what that is which he can do, nor does he know until he has tried&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt; Raplh Waldo Emerson &lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s face it, we live in an authoritarian society. We are taught from a young
age to obey orders, and to trust information from places of authority - almost
without question. This tends to stay with us throughout our lives, in one form
or another. It takes guts and courage to swim upstream, to actively go against
industry &amp;lsquo;best practices&amp;rsquo; and instead choose methods you think are better.
People might laugh at you, or call you crazy. But don&amp;rsquo;t forget - without people
like you there wouldn&amp;rsquo;t be progress.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Authoritarians talk about protocols, but the only valid &amp;lsquo;protocol&amp;rsquo; would be
something like &amp;lsquo;perceive, think, act&amp;rsquo;&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt; Raymond Peat &lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve watched numerous interviews with programmers that I consider good at their
craft and there is one common trait they all tend to have - &lt;strong&gt;they trust
themselves&lt;/strong&gt;. Faced with the question of when they would use a certain
programming practice or tool, their reply is usually something along the lines
of &amp;ldquo;It depends&amp;rdquo;. They use a healthy dose of common sense, reasoning and
experimentation to weigh up the tradeoffs and they aren&amp;rsquo;t afraid to stop using
something if it no longer brings any benefits - no matter what some authority says.&lt;/p&gt;

&lt;p&gt;Good programmers tend to have vastly different styles and approaches. There&amp;rsquo;s no
single way to approach programming well. All roads lead to Rome. What&amp;rsquo;s more
important is finding what works for you, and you can only do that by learning to
trust your own judgment.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#39;Best practices&#39; and the inverted U curve</title>
      <link>http://www.opowell.com/post/best-practices-and-the-inverted-u-curve/</link>
      <pubDate>Mon, 05 Dec 2016 10:14:02 +0200</pubDate>
      
      <guid>http://www.opowell.com/post/best-practices-and-the-inverted-u-curve/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;You should not have any special fondness for a particular weapon, or anything
else, for that matter. Too much is the same as not enough. Without imitating
anyone else, you should have as much weaponry as suits you.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt; Miyamoto Musashi, The Book of Five Rings &lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://www.opowell.com/images/post/best-practices-and-the-inverted-u-shaped-curve/01.png&#34; alt=&#34;Linear crime relationships&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Linear relationships between things are easy to understand. More of this, leads
to more of that. The more severe the penalties for crime are, the less crime
there is. Simple non-linear relationships, like diminishing returns, are not
much of a stretch further - more of this, leads to more of that at the start,
but eventually plateaus out. At the extreme end of penalties for crime, it no
longer lowers crime, since crime is presumably as low as it can it can
realistically be.&lt;/p&gt;

&lt;p&gt;The problem is that in many real world relationships between things, there is a
point of too much, where things not only plateau, but actively get worse - once
a certain threshold is passed. And this is exactly what we tend to struggle
with. You might think that one of the above relationships between crime and
penalties make perfect sense; that it agrees with your intuition. But you&amp;rsquo;d
actually be dead wrong.&lt;/p&gt;

&lt;p&gt;Enter the inverted U shaped curve, introduced by
author &lt;a href=&#34;https://en.wikipedia.org/wiki/Malcolm_Gladwell&#34;&gt;Malcolm Gladwell&lt;/a&gt;, in
his
book
&lt;a href=&#34;http://www.goodreads.com/book/show/15751404-david-and-goliath&#34;&gt;David and Goliath: Underdogs, Misfits and the Art of Battling Giants&lt;/a&gt;.
Research, according to him shows that the real relationship between crime and
the severity of penalties imposed looks more like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.opowell.com/images/post/best-practices-and-the-inverted-u-shaped-curve/02.png&#34; alt=&#34;Crime U sharped curve&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So crime actually starts getting worse again beyond a certain point. Why?
He &lt;a href=&#34;https://www.youtube.com/watch?v=7RGB78oREhM&#34;&gt;gives&lt;/a&gt; a synergy of reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Despite obtaining their money illegally, criminals are bread winners too, and
putting them in jail means their dependents suffer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Children of a jailed parent are 3 times more likely go to jail themselves, and
are two times likely to be depressed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A stable marriage is one of the best predictors of children in disadvantaged
communities living productive lives. Lengthy jail time tends to destroy
marriages.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Freshly released prisoners tend to be worse off after being in prison, and
struggle to readjust back into normal community life, often turning back to
crime.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gladwell gives us the threshold point for communities; if more than two percent
of a community are jailed, we tend to see crime start getting worse again.&lt;/p&gt;

&lt;p&gt;In software development, we tend to see the same patterns. The simpler
relationships between things dominate our thinking, and our reasoning. We like
to follow best practices, often without thought, under the mistaken assumption
that more usually leads to better, or at worst, that it couldn&amp;rsquo;t hurt. But what
if the relationship between benefits and &amp;lsquo;best practice&amp;rsquo; usage actually looked
more like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.opowell.com/images/post/best-practices-and-the-inverted-u-shaped-curve/03.png&#34; alt=&#34;Best practices U shaped curve&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Should code always be DRY? Should functions always be short? The more correct
answer is - it depends. In the words
of &lt;a href=&#34;https://twitter.com/won3d/status/753957308380639232&#34;&gt;Won Chun&lt;/a&gt;, &amp;ldquo;Be
skeptical of blind dogma. Expertise is nuanced.&amp;rdquo; Expertise is finding the point
on that curve where you derive enough of the benefits from following that &amp;lsquo;best
practice&amp;rsquo; to make it worth your while.&lt;/p&gt;

&lt;p&gt;The point of just enough is always dependent on the best practice itself, and
the context where you apply it. More than likely you have a set of curves,
depending on your problem. For some, you might find that you get most of the
benefits from a little bit of use, for others, you might need to use it almost
always.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.opowell.com/images/post/best-practices-and-the-inverted-u-shaped-curve/04.png&#34; alt=&#34;Best practices various U shaped curves&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Programming will always be a holistic pursuit, with many intertwining factors.
Linear models of the world are nice, but they can also act as horse blinkers -
blinding us from reality.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Talks that changed the way I think about programming</title>
      <link>http://www.opowell.com/post/talks-that-changed-the-way-i-think-about-programming/</link>
      <pubDate>Thu, 01 Dec 2016 07:48:23 +0200</pubDate>
      
      <guid>http://www.opowell.com/post/talks-that-changed-the-way-i-think-about-programming/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;The best teacher I had in graduate school spent the whole semester destroying
any beliefs we had about computing. He was a real iconoclast. He happened to
be a genius, so we took it. At the end of the course, we were free because
we didn&amp;rsquo;t believe in anything. We had to learn everything, but then he
destroyed it. He wanted us to understand what had been done, but he didn&amp;rsquo;t
want us to believe in it.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Alan Kay&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here are some talks which have given me new insight into programming, and in
particular what good programming is and isn&amp;rsquo;t.&lt;/p&gt;

&lt;h4 id=&#34;mike-acton-data-orientated-design-https-www-youtube-com-watch-v-rx0itvevjhc-t-1306s&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=rX0ItVEVjHc&amp;amp;t=1306s&#34;&gt;Mike Acton: Data-orientated Design&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Setting the record straight on three big lies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Software is the platform&lt;/li&gt;
&lt;li&gt;Code should be designed around a model of the world&lt;/li&gt;
&lt;li&gt;Code is more important than data&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;jonathan-blow-how-to-program-independent-games-https-www-youtube-com-watch-v-jjdsp5n2ksm-t-2169s&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JjDsP5n2kSM&amp;amp;t=2169s&#34;&gt;Jonathan Blow: How to program independent games&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;One of the most important metrics to optimize for is hours of your life spent
programming something. You have a finite amount of hours in your life after all,
which you&amp;rsquo;d surely like to spend on other things too.&lt;/p&gt;

&lt;h4 id=&#34;eskil-steenberg-how-i-program-in-c-https-www-youtube-com-watch-v-443unegrfom-t-21s&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=443UNeGrFoM&amp;amp;t=21s&#34;&gt;Eskil Steenberg: How I program in C&lt;/a&gt;&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;In the beginning all you want is results, in the end, all you want is control&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;rich-hickey-hammock-driven-development-https-www-youtube-com-watch-v-f84n5ofozbc&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=f84n5oFoZBc&#34;&gt;Rich Hickey: Hammock Driven Development&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Your most powerful problem solver is your subconscious mind.&lt;/p&gt;

&lt;h4 id=&#34;rich-hickey-simple-made-easy-https-www-youtube-com-watch-v-ri8tnmsozo0&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=rI8tNMsozo0&#34;&gt;Rich Hickey: Simple Made Easy&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Simple is not the same as easy. Don&amp;rsquo;t confuse them.&lt;/p&gt;

&lt;h4 id=&#34;brian-will-why-oop-is-bad-https-www-youtube-com-watch-v-qm1iue6iofm&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QM1iUe6IofM&#34;&gt;Brian Will: Why OOP is Bad&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Almost everything that&amp;rsquo;s interesting in a non-trivial program are
&amp;lsquo;cross-cutting&amp;rsquo; concerns. When faced with the reality of real word programs,
promises of encapsulation tend to be broken, and object graphs quickly become
tangled webs.&lt;/p&gt;

&lt;h4 id=&#34;abner-coimbre-what-programming-is-never-about-https-www-youtube-com-watch-v-lzc3hcigxis&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Lzc3HcIgXis&#34;&gt;Abner Coimbre: What Programming is Never About&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The emphasis of programming should be on solving problems, and not on the code itself.&lt;/p&gt;

&lt;h4 id=&#34;scott-meyers-cpu-caches-and-why-you-care-https-www-youtube-com-watch-v-wdikqp4jbke-t-3842s&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WDIkqP4JbkE&amp;amp;t=3842s&#34;&gt;Scott Meyers - CPU Caches and Why You Care&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Iterating over a two dimensional array by row is much faster than by column.&lt;/p&gt;

&lt;h4 id=&#34;jeff-and-casey-show-the-evils-of-non-native-programming-https-www-youtube-com-watch-v-tk50z-gupzi&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=tK50z_gUpZI&#34;&gt;Jeff and Casey Show: The Evils of Non-native Programming&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;We always hear arguments for Garbage Collection, and Virtual Machines, but what about the counter arguments?&lt;/p&gt;

&lt;h4 id=&#34;jeff-and-casey-s-guide-to-becoming-a-bigger-programmer-https-mollyrocket-com-jacs-jacs-0004-0016-html&#34;&gt;&lt;a href=&#34;https://mollyrocket.com/jacs/jacs_0004_0016.html&#34;&gt;Jeff and Casey&amp;rsquo;s Guide to Becoming a Bigger Programmer&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;A strong emphasis on being a critical thinker, and making sure that the code practices that you adopt actually benefit you.&lt;/p&gt;

&lt;h4 id=&#34;hadi-hariri-the-silver-bullet-syndrome-https-www-youtube-com-watch-v-3wyd6j3yjcs&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=3wyd6J3yjcs&#34;&gt;Hadi Hariri: The Silver Bullet Syndrome&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;A depressing tour of the software industry, and it&amp;rsquo;s quest for the silver bullet.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Casey Muratori on &#39;clean&#39; code</title>
      <link>http://www.opowell.com/post/casey-muratori-on-clean-code/</link>
      <pubDate>Tue, 29 Nov 2016 09:36:51 +0200</pubDate>
      
      <guid>http://www.opowell.com/post/casey-muratori-on-clean-code/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;And so, to the point that we care about how clean code is, we only care about
that in so far as it has an affect on our end product.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Casey Muratori&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I used to care deeply about writing code that was as clean and elegant as
possible. Functions should be short, and do one thing only. Don&amp;rsquo;t repeat
yourself. Don&amp;rsquo;t have functions take more than three parameters. Functional
programming has some rather elegant abstractions around manipulating lists of
things too, and it was easy to feel proud of expressing a complex
transformation, in a few lines of careful crafted maps, filters, and reduces.
Yet somewhere is the background of my perceived &amp;lsquo;clean code&amp;rsquo; lies the actual
problem I am trying to solve, buried under layers and layers of &amp;lsquo;beautiful&amp;rsquo;
code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the way you look at code is that you think of it as messy or clean, that is a
very bad habit in my opinion.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Casey Muratori&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enter Casey Muratori (of &lt;a href=&#34;https://handmadehero.org/&#34;&gt;Handmade Hero&lt;/a&gt; fame) and his
paradigm-shifting &lt;a href=&#34;https://youtu.be/Lzc3HcIgXis?t=1768&#34;&gt;rant&lt;/a&gt; on why seeing
code as messy or clean is a really bad habit. &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; His perspective was different and
refreshing, and reminded me that code is merely a tool that we use to solve
problems, and that our job is to solve those problems, not write &amp;lsquo;clean&amp;rsquo; code.
I&amp;rsquo;d summarize his salient points as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Thinking about how to make code not messy, whatever that means to you, is time
you could have used to write code to figure out how to structure your
program. You spent time that should have been spent thinking about the
problem, on thinking about the code. In other words, you have wasted time.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The end goal is to have good working code, not clean code. if you have the
ugliest code in the world, but it runs efficiently, and has no bugs, then it
didn&amp;rsquo;t matter right?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There is no prescribed set of rules that govern what clean code looks like.
Clean code is never about the code itself, it&amp;rsquo;s only ever about the usage or
debugging process, and how the code affects that, in other words it must have
a practical purpose, not just some aesthetic goal.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Code will naturally clean up over time, prematurely cleaning it is worse than
wasting time, because it may lead you down wrong, time consuming paths. For
example, segregating things too early, and then having to spend more time
later tying them together again.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Focus on the problem you want to solve, and once you have solved that problem
then you can think about how to clean up the code. Again, the focus of
cleaning the code is to increase code debug-ability, readability, reuse etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s easy to gravitate towards the path of least resistance, and focus on things
that are superficial, under the belief that they are more useful than they
actually are. It&amp;rsquo;s far harder to focus on what actually matters.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;I highly recommend watching the whole
lecture
&lt;a href=&#34;https://www.youtube.com/watch?v=Lzc3HcIgXis&#34;&gt;What Programming is Never About&lt;/a&gt;,
by Abner Coimbre. It&amp;rsquo;s thanks to him that I actually heard Casey&amp;rsquo;s opinion
on clean code.&lt;/p&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning from those in the Arena</title>
      <link>http://www.opowell.com/post/learning-from-those-in-the-arena/</link>
      <pubDate>Mon, 28 Nov 2016 13:58:45 +0200</pubDate>
      
      <guid>http://www.opowell.com/post/learning-from-those-in-the-arena/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;It is not the critic who counts; not the man who points out how the strong man
stumbles, or where the doer of deeds could have done them better. The credit
belongs to the man who is actually in the arena, whose face is marred by dust
and sweat and blood; who strives valiantly; who errs, who comes short again and
again, because there is no effort without error and shortcoming; but who does
actually strive to do the deeds; who knows great enthusiasms, the great
devotions; who spends himself in a worthy cause; who at the best knows in the
end the triumph of high achievement, and who at the worst, if he fails, at least
fails while daring greatly, so that his place shall never be with those cold and
timid souls who neither know victory nor defeat.”&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Theodore Roosevelt&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was reminded of this quote today when thinking about how much I have
criticized other programmers in the past. People who were actually inside the
arena, and even though I wasn&amp;rsquo;t a fan of their choice of tools or methods, at
least they were writing working software for far more users than me. That
deserves respect.&lt;/p&gt;

&lt;p&gt;Constructive criticism has it&amp;rsquo;s place, though it is much easier to give the
destructive, not helpful kind. I will probably always consider the approach
taken by the majority suboptimal, but that doesn&amp;rsquo;t mean that one can&amp;rsquo;t admire
the blood, sweat, and tears, that goes into any non-trivial software project.
The only real way to show anyone &amp;ldquo;how it&amp;rsquo;s done&amp;rdquo; is to step into the arena
yourself, and show them.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s another angle to this too, and that ties into the notion of not taking
advice from the wrong people. I think strong man Adam Glass put it best:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don&amp;rsquo;t listen to anyone who is weak when it comes to my strength training. I
don&amp;rsquo;t take medical advice from auto mechanics and I don&amp;rsquo;t take computer
programming lessons from grain farmers.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Adam Glass&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the end of the day, actions always speak louder than words. In our society
today it is possible to give the illusion of being more skilled than you are, of
being the person in the arena &amp;ndash; when you have never even stood inside of it.
Being an author, public speaker, or published academic tends to automatically
attach an aura of expertise, but there is only one metric that actually matters
in software - the amount of quality working code you that you ship to actual
users on a regular basis. Learn from the doers, not the talkers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Software Quality: A new definition</title>
      <link>http://www.opowell.com/post/software-quality/</link>
      <pubDate>Wed, 16 Nov 2016 09:20:27 +0200</pubDate>
      
      <guid>http://www.opowell.com/post/software-quality/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Software does not run in a magic fairy aether powered by the fevered dreams of CS PhDs.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Mike Acton&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recently I&amp;rsquo;ve come to adopt a new definition for what I consider quality
software. It&amp;rsquo;s really three primary things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It solves the problem you set out to solve, and ideally, &lt;em&gt;ONLY&lt;/em&gt; that problem.&lt;/li&gt;
&lt;li&gt;It does so, while &lt;em&gt;efficiently&lt;/em&gt; using the hardware underneath you.&lt;/li&gt;
&lt;li&gt;It is written in a reasonable amount of time&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1 forces you to intimately understand your problem. This is the key to not only
coming up with a good solution, but also not creating more problems which you
don&amp;rsquo;t actually need to solve. Mike Acton would say that you also need to
understand the cost of solving your problem, in addition to the problem itself -
otherwise you don&amp;rsquo;t actually understand the problem in the first place.&lt;/p&gt;

&lt;p&gt;2 is less about saving money, or increasing revenue (from faster response
times), than it is about simply not being wasteful of our planet&amp;rsquo;s resources
(software doesn&amp;rsquo;t run on fresh air), or your user&amp;rsquo;s time. Over the last three
decades computers have become an order of magnitude faster, but can we say
that software today feels an order of magnitude more responsive?&lt;/p&gt;

&lt;p&gt;3 is important for more reasons that simply needing to release on time. You
have a finite amount of hours in your life, and a finite amount of projects that
you can complete in your lifetime. Not to mention that you&amp;rsquo;d probably also want
to have a life outside of code.&lt;/p&gt;

&lt;p&gt;These goals are complementary in many ways. Caring about hours of your life
spent coding, means that you ruthlessly have to cut out any anything that doesn&amp;rsquo;t
actually solve your problem. This more than likely leads to better software
performance and efficiency from less code bloat alone.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oliver Powell</title>
    <link>http://www.opowell.com/index.xml</link>
    <description>Recent content on Oliver Powell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Nov 2016 09:36:51 +0200</lastBuildDate>
    <atom:link href="http://www.opowell.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Casey Muratori on &#39;clean&#39; code</title>
      <link>http://www.opowell.com/post/casey-muratori-on-clean-code/</link>
      <pubDate>Tue, 29 Nov 2016 09:36:51 +0200</pubDate>
      
      <guid>http://www.opowell.com/post/casey-muratori-on-clean-code/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;And so, to the point that we care about how clean code is, we only care about
that in so far as it has an affect on our end product.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Casey Muratori&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I used to care deeply about writing code that was as clean and elegant as
possible. Functions should be short, and do one thing only. Don&amp;rsquo;t repeat
yourself. Don&amp;rsquo;t have functions take more than three parameters. Functional
programming has some rather elegant abstractions around manipulating lists of
things too, and it was easy to feel proud of expressing a complex
transformation, in a few lines of careful crafted maps, filters, and reduces.
Yet somewhere is the background of my perceived &amp;lsquo;clean code&amp;rsquo; lies the actual
problem I am trying to solve, buried under layers and layers of &amp;lsquo;beautiful&amp;rsquo;
code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the way you look at code is that you think of it as messy or clean, that is a
very bad habit in my opinion.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Casey Muratori&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enter Casey Muratori (of &lt;a href=&#34;https://handmadehero.org/&#34;&gt;Handmade Hero&lt;/a&gt; fame) and his
paradigm-shifting &lt;a href=&#34;https://youtu.be/Lzc3HcIgXis?t=1768&#34;&gt;rant&lt;/a&gt; on why seeing
code as messy or clean is a really bad habit. &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; His perspective was different and
refreshing, and reminded me that code is merely a tool that we use to solve
problems, and that our job is to solve those problems, not write &amp;lsquo;clean&amp;rsquo; code.
I&amp;rsquo;d summarize his salient points as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Thinking about how to make code not messy, whatever that means to you, is time
you could have used to write code to figure out how to structure your
program. You spent time that should have been spent thinking about the
problem, on thinking about the code. In other words, you have wasted time.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The end goal is to have good working code, not clean code. if you have the
ugliest code in the world, but it runs efficiently, and has no bugs, then it
didn&amp;rsquo;t matter right?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There is no prescribed set of rules that govern what clean code looks like.
Clean code is never about the code itself, it&amp;rsquo;s only ever about the usage or
debugging process, and how the code affects that, in other words it must have
a practical purpose, not just some aesthetic goal.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Code will naturally clean up over time, prematurely cleaning it is worse than
wasting time, because it may lead you down wrong, time consuming paths. For
example, segregating things too early, and then having to spend more time
later tying them together again.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Focus on the problem you want to solve, and once you have solved that problem
then you can think about how to clean up the code. Again, the focus of
cleaning the code is to increase code debug-ability, readability, reuse etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s easy to gravitate towards the path of least resistance, and focus on things
that are superficial, under the belief that they are more useful than they
actually are. It&amp;rsquo;s far harder to focus on what actually matters.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;I highly recommend watching the whole
lecture
&lt;a href=&#34;https://www.youtube.com/watch?v=Lzc3HcIgXis&#34;&gt;What Programming is Never About&lt;/a&gt;,
by Abner Coimbre. It&amp;rsquo;s thanks to him that I actually heard Casey&amp;rsquo;s opinion
on clean code.&lt;/p&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning from those in the Arena</title>
      <link>http://www.opowell.com/post/learning-from-those-in-the-arena/</link>
      <pubDate>Mon, 28 Nov 2016 13:58:45 +0200</pubDate>
      
      <guid>http://www.opowell.com/post/learning-from-those-in-the-arena/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;It is not the critic who counts; not the man who points out how the strong man
stumbles, or where the doer of deeds could have done them better. The credit
belongs to the man who is actually in the arena, whose face is marred by dust
and sweat and blood; who strives valiantly; who errs, who comes short again and
again, because there is no effort without error and shortcoming; but who does
actually strive to do the deeds; who knows great enthusiasms, the great
devotions; who spends himself in a worthy cause; who at the best knows in the
end the triumph of high achievement, and who at the worst, if he fails, at least
fails while daring greatly, so that his place shall never be with those cold and
timid souls who neither know victory nor defeat.‚Äù&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Theodore Roosevelt&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was reminded of this quote today when thinking about how much I have
criticized other programmers in the past. People who were actually inside the
arena, and even though I wasn&amp;rsquo;t a fan of their choice of tools or methods, at
least they were writing working software for far more users than me. That
deserves respect.&lt;/p&gt;

&lt;p&gt;Constructive criticism has it&amp;rsquo;s place, though it is much easier to give the
destructive, not helpful kind. I will probably always consider the approach
taken by the majority suboptimal, but that doesn&amp;rsquo;t mean that one can&amp;rsquo;t admire
the blood, sweat, and tears, that goes into any non-trivial software project.
The only real way to show anyone &amp;ldquo;how it&amp;rsquo;s done&amp;rdquo; is to step into the arena
yourself, and show them.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s another angle to this too, and that ties into the notion of not taking
advice from the wrong people. I think strong man Adam Glass put it best:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don&amp;rsquo;t listen to anyone who is weak when it comes to my strength training. I
don&amp;rsquo;t take medical advice from auto mechanics and I don&amp;rsquo;t take computer
programming lessons from grain farmers.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Adam Glass&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the end of the day, actions always speak louder than words. In our society
today it is possible to give the illusion of being more skilled than you are, of
being the person in the arena &amp;ndash; when you have never even stood inside of it.
Being an author, public speaker, or published academic tends to automatically
attach an aura of expertise, but there is only one metric that actually matters
in software - the amount of quality working code you that you ship to actual
users on a regular basis. Learn from the doers, not the talkers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>uncopyright</title>
      <link>http://www.opowell.com/uncopyright/</link>
      <pubDate>Wed, 16 Nov 2016 15:18:49 +0200</pubDate>
      
      <guid>http://www.opowell.com/uncopyright/</guid>
      <description>&lt;p&gt;This blog at opowell.com, is Uncopyrighted. Its author, Oliver Powell, has released all claims
on copyright and has put all the content of this blog into the public domain.&lt;/p&gt;

&lt;p&gt;No permission is needed to copy, distribute, or modify the content of this site.
Credit is appreciated but not required.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://www.opowell.com/about/</link>
      <pubDate>Wed, 16 Nov 2016 15:18:43 +0200</pubDate>
      
      <guid>http://www.opowell.com/about/</guid>
      <description>&lt;p&gt;About me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Software Quality: A new definition</title>
      <link>http://www.opowell.com/post/software-quality/</link>
      <pubDate>Wed, 16 Nov 2016 09:20:27 +0200</pubDate>
      
      <guid>http://www.opowell.com/post/software-quality/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Software does not run in a magic fairy aether powered by the fevered dreams of CS PhDs.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Mike Acton&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recently I&amp;rsquo;ve come to adopt a new definition for what I consider quality
software. It&amp;rsquo;s really three primary things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It solves the problem you set out to solve, and ideally, &lt;em&gt;ONLY&lt;/em&gt; that problem.&lt;/li&gt;
&lt;li&gt;It does so, while &lt;em&gt;efficiently&lt;/em&gt; using the hardware underneath you.&lt;/li&gt;
&lt;li&gt;It is written in a reasonable amount of time&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1 forces you to intimately understand your problem. This is the key to not only
coming up with a good solution, but also not creating more problems which you
don&amp;rsquo;t actually need to solve. Mike Acton would say that you also need to
understand the cost of solving your problem, in addition to the problem itself -
otherwise you don&amp;rsquo;t actually understand the problem in the first place.&lt;/p&gt;

&lt;p&gt;2 is less about saving money, or increasing revenue (from faster response
times), than it is about simply not being wasteful of our planet&amp;rsquo;s resources
(software doesn&amp;rsquo;t run on fresh air), or your user&amp;rsquo;s time. Over the last three
decades computers have become an order of magnitude faster, but can we say
that software today feels an order of magnitude more responsive?&lt;/p&gt;

&lt;p&gt;3 is important for more reasons that simply needing to release on time. You
have a finite amount of hours in your life, and a finite amount of projects that
you can complete in your lifetime. Not to mention that you&amp;rsquo;d probably also want
to have a life outside of code.&lt;/p&gt;

&lt;p&gt;These goals are complementary in many ways. Caring about hours of your life
spent coding, means that you ruthlessly have to cut out any anything that doesn&amp;rsquo;t
actually solve your problem. This more than likely leads to better software
performance and efficiency from less code bloat alone.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>